General Outline
Jacob Nguyen and Michael Reeve 
3/14/16

***********************
* Ideas and Concepts
***********************

** I was thinking about the fact that we might want a couple extra LEDS to
   indicate what ship they are currently working on inputting, it would  just be
   an extra 5 and we have enough extra SPI codes that we could totally do it,
   whether we actually want to bother with it is another question entirely

** If we do more LEDS we could even make a error message code that can give the 
user some indication as to why the input they gave was invalid, such as:
    - Ship goes over edge of board
    - Ship overlaps with previously placed ship
    - Wrong player inputting
    - The shot that was taken has already been taken
    - (Are there any other potential error messages we will end up with?)

** How much information do we want to be storing outside of the grid, previously
   we had discussed:
    - For each ship
        - Starting location and orientation



***********************
*FSM STUFF
***********************

Main States:
1. Start Game
2. Set ships
3. General game play
4. End Game

START GAME
**********
    We probably only need one state for this
        - Reset everything (SRAM and FSM)
        - send over SPI a signal to indicate that the boards should be cleared

SET SHIPS
*********

OVERVIEW:

    Set the five ships for the two players. Have a set order (23345 or 54332) so
    that we don't have to worry about them inputting the size of the ships. We
    can start with player one and only accept player 1s ships until all have
    been placed, then we can accept only player 2s ships. This means that the
    player select must be set correctly otherwise we will have to give an
    invalid input signal to the FPGA to notify them it is wrong.

    When we get an input from the user we will need to do a couple checks. 
        - The correct player is doing the inputting
        - The ship placement isn't going over the edge of the board
        - The ship placement isn't overlapping another ship that has already been
          placed
            - this step could potentially be skipped for the first ship.
                - If we do this then for efficiency it might be better to input 
                  in the 54332 order as then we won't have to be checking for 
                  overlap on the 5 ship
        - If they fail any of these checks we will have to request a new input 
          for that length of ship

    Once we have checked that the input is valid we will need to set the grid
    cells in SRAM to be a ship, we will need to initialize the ship of that
    lengths memory to have the desired starting location and orientation.

    We then can move on to the next ship or the next player accordingly,
    probably will end up with two counters to allow for easy management of the
    state we are in. Once we have inputted all of the states we can move on to
    the general game play mode.

GENERAL GAME PLAY
*****************

OVERVIEW:
    
    In this state the game will alternate between the two players allowing for the players to individually make their moves and then get feedback on the outcome of their shot. This stage will require a large number of states as there are a lot of checks that must be made. 

    First we need to check what is in the grid at that location.
        - If it is empty then we can write a miss to the grid, return a miss to 
          the SPI and move on to the next players turn
        - If it is a hit/miss then we need to request a new shot as the input
          was not a valid shot
        - If it is a ship then we need to enter into another set of states.
    * The first two options will can likely be one or two states and really
    shouldn't require very much logic or more extended thought other than 
    needing to access the SRAM to determine the state of that grid cell

    If it is a hit then we have a bunch of shit to do:
        - 

-----------------------------------------------------------------------------
Jacob: I'll be writing a more concise version of what we need to do. A Work In Progress (WIP)

Main States:
1. Start Game
2. Set ships
3. General game play
4. End Game

START GAME
**********
    - Set Memory bits to 0
    - Send SPI to FPGA to clear board


SET SHIPS
*********
    - (SHIP ORDER: 54332)
    - Player 1 goes first:
        - Input row, col, direction (0 vertical, 1 horizontal, ship extends from that point)
        - Press button to input info to chip
            - If overlap/invalid position, send error message in some format, wait until next input
            - Else, save ship location inside game board storage memory (save those memory bits as ship bits
              , send that information to FPGA). Increment ship count.
                - Save ship info inside ship storage memory.
        - If ship count reaches 5, let player two start.
    - Player 2 goes next:
        - Do what player 1 does.
    - Switch to General Gameplay.


GENERAL GAME PLAY
*****************
    
    - Toggle between Player 1 and 2 (assume correct switching IRL)
    - Player 1/2 inputs an attack at some row, col.
        - Check memory at the enemy location.
            - If empty, save the memory as miss, inform both players using SPI.
                - Switch players.
            - If ship, save the memory as hit, inform both players using SPI.
                - Use ship storage memory to determine whether ship has sunk.
                    - If sunk, increment ship sunk count.
                        - If ship sunk count is 5, switch to end game state.
                    - Else, continue.
                - Switch players.
            - If miss/hit/invalid, inform both players using SPI, wait for next input.


END GAME
********
    - Set Memory bits to 0
    - Send SPI to FPGA to signify GAME OVER.
